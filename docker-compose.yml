version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - APP_ENV=development
      - DATABASE_URL=sqlite:///./data/app.db
      - TRACKER_PATH=/app/data/career_autopilot_tracker.xlsx
      - APPLY_PACK_DIR=/app/data/applications
      - RESUME_DIR=/app/data/resumes
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
    volumes:
      - ./data:/app/data
      - ./apps/backend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_BACKEND_URL=http://backend:8000
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - APP_ENV=development
      - DATABASE_URL=sqlite:///./data/app.db
      - TRACKER_PATH=/app/data/career_autopilot_tracker.xlsx
      - APPLY_PACK_DIR=/app/data/applications
      - RESUME_DIR=/app/data/resumes
    volumes:
      - ./data:/app/data
      - ./apps/backend/logs:/app/logs
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # Optional: Add a simple database for production
  # postgres:
  #   image: postgres:15-alpine
  #   environment:
  #     POSTGRES_DB: career_autopilot
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: postgres
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   restart: unless-stopped

# volumes:
#   postgres_data:
